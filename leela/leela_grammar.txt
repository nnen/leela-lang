Program            -> !startContext Preamble !allocLocals CompoundStmt :STOP !writeChunks !writeStrings .

Preamble           -> ConstDecl Preamble
                    | VarDecl Preamble
                    | .

ConstDecl          -> const ident equals ConstExpr !addConst ConstDeclRest semicolon .
ConstDeclRest      -> comma ident equals ConstExpr !addConst ConstDeclRest
                    | .
ConstExpr          -> number !pushNumber 
                    | string !pushString .

VarDecl            -> var ident !addLocal VarDeclRest semicolon .
VarDeclRest        -> comma ident !addLocal VarDeclRest
                    | .

Statement          -> CompoundStmt
                    | Assignment
                    | print RValue :PRINT
                    | if Expression :NOT !ifJump then Statement ElseStmt
                    | while !startWhile Expression :NOT !whileJump do Statement !endWhile
                    | return RValue :RETURN
                    | .
CompoundStmt       -> begin Statement StatementRest end .
StatementRest      -> semicolon Statement StatementRest
                    | .
ElseStmt           -> else !elseJump Statement !ifEnd
                    | !ifEnd .

Assignment         -> ident AssignVar .
AssignVar          -> assign RValue !assignVar
                    | !getValueForLookup period ident !identToString AssignIndex
                    | !getValueForLookup left_bra RValue right_bra AssignIndex .
AssignIndex        -> assign RValue :STORE
                    | :LOAD period ident !identToString AssignIndex
                    | :LOAD left_bra RValue right_bra AssignIndex .

LValue             -> ident LValueRest .
LValueRest         -> Index LValueRest | .
RValue             -> Expression
                    | function !startFunction left_par ArgNameList right_par colon FunctionPreamble !allocLocals Statement :PUSH :RETURN !endFunction
                    | lambda !startFunction left_par ArgNameList right_par colon RValue :RETURN !endFunction .

FunctionPreamble   -> VarDecl FunctionPreamble
                    | .

Expression         -> Term ExpressionRest
                    | minus Term ExpressionRest .
ExpressionRest     -> plus Term :ADD ExpressionRest
                    | minus Term :SUB ExpressionRest
                    | .
Term               -> Factor TermRest .
TermRest           -> asterix Factor :MUL TermRest
                    | slash Factor :DIV TermRest
                    | .
Factor             -> PrimaryExpr
				| ConstExpr
                    | left_par Expression right_par .
PrimaryExpr        -> ident !getSymbolValue PostfixOp .
PostfixOp          -> left_bra Expression :LOAD right_bra PostfixOp
                    | left_par ParamList !writeCall right_par PostfixOp
                    | .

ParamList          -> RValue ParamListRest !returnPlusOne
                    | !returnZero .
ParamListRest      -> comma RValue ParamListRest !returnPlusOne
                    | !returnZero .

ArgNameList        -> ident !addArg ArgNameListRest
                    | .
ArgNameListRest    -> comma ident !addArg ArgNameListRest
                    | .

