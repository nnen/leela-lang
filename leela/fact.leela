var fact, Y;
begin
	fact := function (x): begin
		if x <= 1 then return 1;
		return x * fact(x - 1);
	end;
	
	print "Factorial using closure:";
	print "0! = " + fact(0);
	print "1! = " + fact(1);
	print "2! = " + fact(2);
	print "5! = " + fact(5);
	print "10! = " + fact(10);

	fact := function (x, fn): begin
		if x <= 1 then return 1;
		return x * fn(x - 1, fn);
	end;
	
	print "Self-referencing factorial:";
	print "0! = " + fact(0, fact);
	print "1! = " + fact(1, fact);
	print "2! = " + fact(2, fact);
	print "5! = " + fact(5, fact);
	print "10! = " + fact(10, fact);

	fact := (lambda (inner): lambda (n): inner(n, inner))(fact);
	
	print "Simple combinator:";
	print "0! = " + fact(0);
	print "1! = " + fact(1);
	print "2! = " + fact(2);
	print "5! = " + fact(5);
	print "10! = " + fact(10);
	
	{ Y combinator }
	
	Y := lambda (f): (lambda (x): f(lambda (y): (x(x))(y)))(lambda (x): f(lambda (y): (x(x))(y)));
	
	fact := Y(lambda (f): function (n): begin
		if n <= 0 then return 1;
		return n * f(n - 1);
	end);
	
	print "Factorial using Y combinator:";
	print "0! = " + fact(0);
	print "1! = " + fact(1);
	print "2! = " + fact(2);
	print "5! = " + fact(5);
	print "10! = " + fact(10);
end

